schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(
    url: "https://specs.apollo.dev/inaccessible/v0.2"
    import: ["@inaccessible"]
    for: SECURITY
  ) {
  query: Query
}

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

directive @lowercase on FIELD

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS @join__graph(name: "accounts", url: "http://localhost:4001")
  PRODUCTS @join__graph(name: "products", url: "http://localhost:4002")
  REVIEWS @join__graph(name: "reviews", url: "http://localhost:4003")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Picture @join__type(graph: ACCOUNTS) @join__type(graph: REVIEWS) {
  url: String!
  width: Int!
  height: Int!
  altText: String! @inaccessible @join__field(graph: REVIEWS)
}

type Product
  @join__type(graph: PRODUCTS, key: "upc")
  @join__type(graph: REVIEWS, key: "upc") {
  upc: String!
  name: String! @join__field(graph: PRODUCTS)
  price: Int!
    @join__field(graph: PRODUCTS)
    @join__field(graph: REVIEWS, external: true)
  reviews: [Review!]! @join__field(graph: REVIEWS)
}

type Query
  @join__type(graph: ACCOUNTS)
  @join__type(graph: PRODUCTS)
  @join__type(graph: REVIEWS) {
  me: User! @join__field(graph: ACCOUNTS)
  topProducts: [Product!]! @join__field(graph: PRODUCTS)
  reviews: [Review!]! @join__field(graph: REVIEWS)
}

type Review @join__type(graph: REVIEWS) {
  id: ID!
  body: String!
  pictures: [Picture!]!
  product: Product! @join__field(graph: REVIEWS, provides: "price")
  author: User!
}

enum Trustworthiness @join__type(graph: REVIEWS) {
  REALLY_TRUSTED @join__enumValue(graph: REVIEWS)
  KINDA_TRUSTED @join__enumValue(graph: REVIEWS)
  NOT_TRUSTED @join__enumValue(graph: REVIEWS)
}

type User
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: REVIEWS, key: "id") {
  id: ID!
  username: String! @join__field(graph: ACCOUNTS)
  profilePicture: Picture @join__field(graph: ACCOUNTS)

  """
  This used to be part of this subgraph, but is now being overridden from
  `reviews`
  """
  reviewCount: Int! @join__field(graph: REVIEWS, override: "accounts")
  joinedTimestamp: Int!
    @join__field(graph: ACCOUNTS)
    @join__field(graph: REVIEWS, external: true)
  reviews: [Review!]! @join__field(graph: REVIEWS)
  trustworthiness: Trustworthiness!
    @join__field(graph: REVIEWS, requires: "joinedTimestamp")
}
